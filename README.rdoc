= Dfeitosa.Enums

* http://github.com/dnfeitosa/Dnfeitosa.Enums

== AUTHOR

  Diego Feitosa - dnfeitosa@gmail.com

  Special thanks to
	* Rafael Ferreira (rafaeldff@gmail.com) - Thread safety issues
	- Mozair 'MACSkeptic' Alves (http://github.com/MACSkeptic) - Switch statement implementation

== DESCRIPTION:

  Implementation of Enums that behaves almost like the Java ones.

== USAGE:

   = Simple enum

   public class MyEnum : Enum<MyEnum>
   {
		public static readonly Value1 = new MyEnum();
		public static readonly Value2 = new MyEnum();
   }

   var name = MyEnum.Value1.Name; // "Value1" (string)
   var ordinal = MyEnum.Value1.Name; // 0 (int)

   = Binary serialization
   To allow serialization, just add the ISerializable attribute on class and
   the deserialization constructor. The rest is up to the library.

   [ISerializable]
   public class MyEnum : Enum<MyEnum>
   {
		public static readonly Value1 = new MyEnum();
		public static readonly Value2 = new MyEnum();

		protected MyEnum() {}
		protected MyEnum(SerializationInfo info, StreamingContext context) 
			: base(info, context) {}
   }

   = Switch statement
   public class Language : Enum<Language>
   {
		public static readonly Pt = new Language();
		public static readonly En = new Language();
		public static readonly Pl = new Language();
   }

   var result = Language.Switch<string>()
        .When(Language.PtBr).Do(() => "Eu falo portugues")
        .When(Language.En).Do(() => "I speak english")
        .When(Language.Pl).Do(() => "Mowie polski")
        .Default().Do(() => "Don't speak, please")
        .ConsiderThisCase(Language.Pl);

   Console.WriteLine(result); // "Mowie polski"

== INSTALL:

  Add a reference to Dnfeitosa.Enums.dll

== LICENSE:

	The MIT license. See LICENSE file.